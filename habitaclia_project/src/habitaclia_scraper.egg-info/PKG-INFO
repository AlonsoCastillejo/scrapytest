Metadata-Version: 2.4
Name: habitaclia-scraper
Version: 0.1.0
Summary: Sistema modular de scraping inmobiliario para investigaci√≥n acad√©mica
Home-page: https://github.com/tu-usuario/habitaclia-scraper
Author: Tu Nombre
Author-email: tu@email.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.31.0
Requires-Dist: beautifulsoup4>=4.12.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: lxml>=4.9.3
Requires-Dist: numpy>=1.24.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: pytest>=7.0.0
Requires-Dist: jupyter>=1.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Provides-Extra: analysis
Requires-Dist: jupyter>=1.0.0; extra == "analysis"
Requires-Dist: matplotlib>=3.7.0; extra == "analysis"
Requires-Dist: seaborn>=0.12.0; extra == "analysis"
Requires-Dist: plotly>=5.15.0; extra == "analysis"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Habitaclia Scraper - Documentaci√≥n del Proyecto

## üìã Resumen del Proyecto

**Proyecto**: Sistema de extracci√≥n automatizada de datos inmobiliarios de Habitaclia.com para investigaci√≥n acad√©mica  
**Objetivo**: Crear un dataset completo del mercado inmobiliario espa√±ol para desarrollo de modelos de IA  
**Alcance**: M√∫ltiples ciudades espa√±olas con datos de alquiler y venta  

## üèóÔ∏è Arquitectura del Sistema

### Componentes Principales

1. **HabitacliaMultiCityScraper**: Clase principal que gestiona el scraping multi-ciudad
2. **Sistema de Extracci√≥n**: M√≥dulos especializados para diferentes tipos de datos
3. **Control Anti-Bot**: Gesti√≥n de headers, delays y rotaci√≥n de User-Agents
4. **Almacenamiento**: Exportaci√≥n a CSV y JSON con metadatos

### Estructura de Datos
```
Propiedad {
  - city_name, city_code      # Informaci√≥n geogr√°fica
  - title, price, location    # Datos b√°sicos
  - rooms, bathrooms, area_m2 # Caracter√≠sticas t√©cnicas
  - description               # Descripci√≥n textual
  - image_urls, image_count   # Recursos multimedia
  - url, timestamp           # Metadatos de scraping
}
```

## üåç Cobertura Geogr√°fica

**32 ciudades espa√±olas** organizadas por importancia:

- **Tier 1**: Barcelona, Madrid, Valencia, Sevilla
- **Tier 2**: Bilbao, M√°laga, Zaragoza, Murcia, Palma
- **Tier 3**: Las Palmas, Valladolid, Vigo, Gij√≥n, C√≥rdoba, Alicante
- **Otras 17 ciudades**: Granada, Pamplona, San Sebasti√°n, etc.

## üîß Tecnolog√≠as Utilizadas

### Librer√≠as Python
```python
requests>=2.31.0        # Cliente HTTP para scraping
beautifulsoup4>=4.12.0  # Parser HTML/XML
pandas>=2.0.0           # Manipulaci√≥n y an√°lisis de datos
lxml>=4.9.3            # Parser XML r√°pido
numpy>=1.24.0          # Computaci√≥n num√©rica
```

### Funcionalidades T√©cnicas
- **Web Scraping**: Extracci√≥n automatizada de contenido HTML
- **Anti-Bot Evasion**: Rotaci√≥n de headers y delays inteligentes
- **Data Processing**: Limpieza y estructuraci√≥n de datos
- **Export Management**: M√∫ltiples formatos de salida

## üõ°Ô∏è Estrategias Anti-Detecci√≥n

### Protecciones Implementadas
1. **User-Agent Rotation**: 4+ navegadores diferentes
2. **Delays Variables**: 2-60 segundos entre requests
3. **Headers Realistas**: Headers completos de Chrome/Firefox
4. **Session Management**: Gesti√≥n de cookies y estado
5. **Error Handling**: Reintentos autom√°ticos con backoff

### Estructura de Delays
```
P√°ginas de b√∫squeda: 3-7 segundos
Entre inmuebles: 2-5 segundos  
Entre ciudades: 30-60 segundos (configurable)
```

## üìä Datos Extra√≠dos

### Informaci√≥n Principal
- **T√≠tulo**: Descripci√≥n completa del inmueble
- **Precio**: Valor num√©rico en euros + texto original
- **Ubicaci√≥n**: Direcci√≥n y barrio espec√≠fico
- **Caracter√≠sticas**: Habitaciones, ba√±os, metros cuadrados

### Metadatos
- **Ciudad**: C√≥digo y nombre completo
- **URLs**: Enlace original para verificaci√≥n
- **Timestamp**: Momento exacto de extracci√≥n
- **Im√°genes**: URLs y conteo de fotos

### Patrones de Extracci√≥n
```python
# Precios: Regex para diferentes formatos
r'(\d{1,3}(?:\.\d{3})*(?:,\d{2})?)\s*‚Ç¨'

# Habitaciones: M√∫ltiples patrones
r'(\d+)\s*(?:rooms?|habitaciones?|hab\.?)'

# √Årea: Metros cuadrados
r'(\d+)\s*m[¬≤2]'
```

## üöÄ Uso del Sistema

### Configuraci√≥n B√°sica
```python
scraper = HabitacliaMultiCityScraper()

# Scraping de ciudades principales
main_cities = ['barcelona', 'madrid', 'valencia', 'sevilla']

scraper.scrape_multiple_cities(
    cities=main_cities,
    property_type="rent",      # "rent" o "homes"
    max_pages=2,              # P√°ginas por ciudad
    delay_between_cities=(30, 60)  # Segundos entre ciudades
)
```

### Par√°metros de Control
- **cities**: Lista de c√≥digos de ciudad o None para todas
- **property_type**: "rent" (alquiler) o "homes" (venta)
- **max_pages**: N√∫mero de p√°ginas a scrapear por ciudad
- **delay_between_cities**: Rango de delay entre ciudades

## üìà Rendimiento y Escalabilidad

### M√©tricas de Rendimiento
- **Velocidad**: ~20-30 propiedades/hora por ciudad
- **√âxito**: 85-95% de extracci√≥n exitosa
- **Cobertura**: 15-50 propiedades por p√°gina

### Estimaciones de Tiempo
```
4 ciudades principales ‚Üí 2-3 horas
10 ciudades medianas   ‚Üí 5-6 horas  
32 ciudades completas  ‚Üí 15-20 horas
```

### Limitaciones
- **Rate Limiting**: Protecciones anti-bot de Habitaclia
- **Contenido Din√°mico**: Algunas p√°ginas pueden usar JavaScript
- **Estructura Variable**: Cambios en el HTML requieren mantenimiento

## üíæ Formatos de Salida

### CSV (Recomendado para an√°lisis)
```csv
city_name,city_code,title,price,location,rooms,bathrooms,area_m2,url,timestamp
Barcelona,barcelona,"Flat 3 rooms Barcelona",1500,Eixample,3,2,85,https://...,2025-08-19T...
```

### JSON (Estructura completa)
```json
{
  "city_name": "Barcelona",
  "price": 1500,
  "image_urls": ["url1", "url2"],
  "description": "Descripci√≥n completa...",
  "timestamp": "2025-08-19T16:57:43"
}
```

## ‚öñÔ∏è Consideraciones Legales y √âticas

### Cumplimiento Legal
- ‚úÖ **Uso Acad√©mico**: Proyecto de investigaci√≥n para m√°ster
- ‚úÖ **Datos P√∫blicos**: Informaci√≥n disponible p√∫blicamente
- ‚úÖ **Rate Limiting**: Respeto por los recursos del servidor
- ‚úÖ **Robots.txt**: Consideraci√≥n de directivas (cuando sea posible)

### Buenas Pr√°cticas
- **Prop√≥sito Educativo**: Exclusivamente para investigaci√≥n
- **No Comercial**: Sin uso con fines de lucro
- **Respeto al Servidor**: Delays apropiados entre requests
- **Transparencia**: Headers que identifican el prop√≥sito acad√©mico

## üîÑ Mantenimiento y Actualizaciones

### Puntos de Mantenimiento
1. **Selectores CSS**: Pueden cambiar con redise√±os web
2. **Estructura URLs**: Patrones de navegaci√≥n
3. **Anti-Bot Measures**: Nuevas protecciones de seguridad
4. **Ciudades Disponibles**: Expansi√≥n geogr√°fica

### Debugging y Logs
```python
# Logging completo habilitado
habitaclia_multicity.log  # Archivo de logs
Console output           # Progreso en tiempo real
```

## üìä Casos de Uso para Investigaci√≥n

### An√°lisis Posibles
- **Predicci√≥n de Precios**: Modelos ML basados en caracter√≠sticas
- **An√°lisis Geogr√°fico**: Diferencias entre ciudades espa√±olas
- **Tendencias Temporales**: Evoluci√≥n del mercado inmobiliario
- **Segmentaci√≥n**: Clusters por precio, tama√±o, ubicaci√≥n

### Variables para Modelos IA
```python
Features = [
    'city_code',      # Variable categ√≥rica (location)
    'rooms',          # Num√©rica discreta
    'bathrooms',      # Num√©rica discreta  
    'area_m2',        # Num√©rica continua
    'location'        # Categ√≥rica (barrio)
]
Target = 'price'      # Variable objetivo
```

## üéØ Entregables del Proyecto

### Archivos Generados
1. **habitaclia_scraper.py**: C√≥digo fuente completo
2. **requirements.txt**: Dependencias del proyecto
3. **habitaclia_multicities_YYYYMMDD_HHMMSS.csv**: Dataset principal
4. **habitaclia_multicities_YYYYMMDD_HHMMSS.json**: Datos estructurados
5. **habitaclia_multicity.log**: Logs de ejecuci√≥n

### Documentaci√≥n
- **Setup Instructions**: Gu√≠a de instalaci√≥n y configuraci√≥n
- **Usage Examples**: Ejemplos pr√°cticos de uso
- **Technical Documentation**: Este documento

---

**Proyecto desarrollado para**: Investigaci√≥n acad√©mica de m√°ster  
**Fecha**: Agosto 2025  
**Tecnolog√≠as**: Python, BeautifulSoup, Pandas, Requests  
**Alcance**: 32 ciudades espa√±olas, datos inmobiliarios completos
